@model blogapp.Models.BlogPost
@using System.Text.RegularExpressions

@{
    Layout = null; // Don't use the shared layout
    ViewData["Title"] = Model.Title;
    string cleanedContent = Regex.Replace(Model.Content ?? "", @"\s*data-(start|end)=""[^""]*""", "", RegexOptions.IgnoreCase);
    var profileImage = Context.Session.GetString("ProfileImagePath") ?? "/images/profiles/user-icon.png";
    var userName = Context.Session.GetString("UserName") ?? "User";
    var userInitials = userName.Length > 1 ? string.Join("", userName.Split(' ').Select(n => n[0])).ToUpper() : userName.ToUpper();
    var hasProfileImage = !string.IsNullOrEmpty(profileImage) && profileImage != "/images/profiles/user-icon.png";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BlogHub - @Model.Title</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/css/blog-details.css" rel="stylesheet" />
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --success-gradient: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            --dark-bg: #0f172a;
            --card-bg: #ffffff;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
        }
        .navbar {
            background: rgba(15, 23, 42, 0.95) !important;
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }
        .navbar-brand {
            font-weight: 800;
            font-size: 1.75rem;
            color: #fff !important;
            letter-spacing: -0.5px;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .navbar-brand i {
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 1.5rem;
        }
        .nav-link {
            color: rgba(255, 255, 255, 0.8) !important;
            font-weight: 500;
            transition: all 0.3s ease;
            position: relative;
            padding: 0.5rem 1rem !important;
        }
        .nav-link:hover {
            color: #fff !important;
            transform: translateY(-1px);
        }
        .nav-link::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            width: 0;
            height: 2px;
            background: var(--primary-gradient);
            transition: all 0.3s ease;
            transform: translateX(-50%);
        }
        .nav-link:hover::after {
            width: 80%;
        }
        /* Center the container vertically and horizontally */
        body {
            margin: 0 !important;
            padding: 0 !important;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #eeeded;
        }
        .main-content {
            margin: 0 !important;
            width: 100%;
            /* padding: 0 !important; */
            /* Removed align-items and justify-content for top alignment */
        }
        .container {
            margin: 0 !important;
            padding: 0 !important;
            display: flex;
            flex-direction: column;
            /* Removed align-items and justify-content for top alignment */
            min-height: 0;
        }
        .blog-details-card {
            margin: 0 !important;
            padding: 20px !important;
            min-height: 70vh;
        }
    </style>
</head>
<body style="margin: 0; padding: 0;">
    <!-- Enhanced Navbar (Copied from Landing Page) -->
    <nav class="navbar navbar-expand-lg navbar-dark fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="fas fa-feather-alt"></i>
                <span>BlogHub</span>
            </a>
            <span class="navbar-text d-none d-md-inline ms-2 fw-light" style="font-size:1rem; color:rgba(255,255,255,0.7); letter-spacing:0.5px;">Inspire. Create. Connect.</span>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item"><a class="nav-link" href="/Auth/Login"><i class="fas fa-sign-in-alt me-1"></i>Login</a></li>
                    <li class="nav-item"><a class="nav-link" href="/Auth/Register"><i class="fas fa-user-plus me-1"></i>Register</a></li>
                    <li class="nav-item"><a class="nav-link" href="/Admin/Login"><i class="fas fa-shield-alt me-1"></i>Admin</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <!-- End Enhanced Navbar -->
    <!-- Main Content -->
    <main class="main-content" id="mainContent" style="padding-top: 110px; margin-top: 0;">
        <!-- ‚úÖ Blog Details View -->
        <div class="container">
            <div class="blog-details-card">
                @if (TempData["LikeMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @TempData["LikeMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                
                @if (TempData["CommentMessage"] != null)
                {
                    <div class="alert alert-info alert-dismissible fade show" role="alert">
                        @TempData["CommentMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                
                @Html.AntiForgeryToken()
                
                <h1 class="blog-title">@Model.Title</h1>

                <div class="blog-meta">
                    <div class="author-info">
                        @if (!string.IsNullOrEmpty(Model.User?.ProfileImagePath))
                        {
                            <img src="@Model.User.ProfileImagePath" alt="@(Model.User?.Name ?? "Unknown")" class="author-avatar-img" />
                        }
                        else
                        {
                            <div class="author-avatar">@(Model.User?.Name != null ? string.Join("", Model.User.Name.Split(' ').Select(n => n[0])).ToUpper() : "U")</div>
                        }
                        <div class="author-details">
                            <strong>@Model.User?.Name</strong>
                            <span class="post-date">@Model.CreatedAt.ToString("dd MMM yyyy")</span>
                        </div>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.ImagePath))
                {
                    <img src="@Model.ImagePath" alt="@Model.Title" class="blog-image" />
                }

                <div class="blog-content">
                    @Html.Raw(cleanedContent)
                </div>

                <div class="blog-tags">
                    <strong>Tags:</strong> @Model.Tags
                </div>

                <!-- ‚úÖ Like Section (AJAX version) -->
                @{
                    var userId = Context.Session.GetInt32("UserId");
                    var isLiked = Model.Likes?.Any(l => l.UserId == userId) ?? false;
                }
                <button type="button" class="like-btn" onclick="likePost(@Model.Id, this)" title="@(isLiked ? "Unlike this post" : "Like this post")">
                    @if (isLiked)
                    {
                        <span style="color: #e74c3c;">‚ù§Ô∏è</span>
                    }
                    else
                    {
                        <span>ü§ç</span>
                    }
                    <strong class="like-count">@(Model.Likes?.Count ?? 0) Likes</strong>
                </button>

                <!-- ‚úÖ Video Player -->
                @if (!string.IsNullOrEmpty(Model.VideoPath))
                {
                    <div class="video-section">
                        <h4>üé• Video</h4>
                        <div class="video-container">
                            <video controls class="blog-video">
                                <source src="@Model.VideoPath" type="video/@Model.VideoPath.Split('.').Last()">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    </div>
                }

                <!-- ‚úÖ Comments Section -->
                <div class="comments-section">
                    <h4>üí¨ Comments</h4>

                    @if (Model.Comments?.Count > 0)
                    {
                        <ul class="comment-list">
                            @foreach (var comment in Model.Comments)
                            {
                                <li>
                                    <strong>@comment.Author:</strong> @comment.Content <br />
                                    <small class="text-muted">@comment.CreatedAt.ToString("g")</small>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No comments yet.</p>
                    }

                    <!-- Add Comment Form -->
                    <div class="comment-box">
                        <form asp-action="AddComment" method="post" class="comment-form">
                            <input type="hidden" name="postId" value="@Model.Id" />
                            <div class="mb-2">
                                <textarea name="content" class="form-control" rows="3" placeholder="Add a comment..." required></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">üí¨ Post Comment</button>
                        </form>
                    </div>
                </div>

                <!-- Back to BlogHub button -->
                <div class="back-section" style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 2px solid #f0f0f0;">
                    <a href="/" class="back-to-bloghub-btn" style="
                        display: inline-block;
                        background:rgb(15, 25, 70);
                        color: white;
                        padding: 12px 24px;
                        border-radius: 25px;
                        text-decoration: none;
                        font-weight: 600;
                        transition: all 0.3s ease;
                    ">
                        <i class="fas fa-arrow-left"></i> Back to BlogHub
                    </a>
                </div>
            </div>
        </div>
    </main>

    <!-- Scripts -->
    <script src="~/js/site.js"></script>
    <script>
        // Override showNotification to prevent any notifications
        function showNotification(message, type = 'info') {
            // Do nothing - suppress all notifications
            console.log('Notification suppressed:', message);
        }



        // Logout function
        function logout() {
            window.location.href = '/Auth/Logout';
        }

        // Notification toggle function
        function toggleNotifications() {
            // Add notification functionality here
            console.log('Toggle notifications');
        }
    </script>

    <!-- TinyMCE CDN (Rich Text Editor) -->
    <script src="https://cdn.tiny.cloud/1/6jpfl0ghtxe0fru5e02fxn5o2ydbe65tco16kxvj1tscqxn9/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
        tinymce.init({
            selector: 'textarea#contentEditor',
            menubar: false,
            plugins: 'link image lists code preview',
            toolbar: 'undo redo | bold italic underline | bullist numlist | link image | code preview',
            height: 300,
            apiKey: '6jpfl0ghtxe0fru5e02fxn5o2ydbe65tco16kxvj1tscqxn9'
        });
    </script>
    <script>
        // AJAX Like functionality
        function likePost(postId, button) {
            // Add loading state
            button.disabled = true;
            const originalText = button.innerHTML;
            button.innerHTML = '<span>‚è≥</span>';

            fetch(`/BlogPost/LikeAjax/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    '__RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the heart icon
                    const heartSpan = button.querySelector('span:first-child');
                    if (data.isLiked) {
                        heartSpan.innerHTML = '‚ù§Ô∏è';
                        heartSpan.style.color = '#e74c3c';
                    } else {
                        heartSpan.innerHTML = 'ü§ç';
                        heartSpan.style.color = '';
                    }

                    // Update the like count
                    const countSpan = button.querySelector('.like-count');
                    countSpan.textContent = data.likeCount + ' Likes';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // Just log the error, don't show user message
            })
            .finally(() => {
                // Re-enable button
                button.disabled = false;
            });
        }

        // Remove the notification function since we don't want error messages
    </script>
</body>
</html> 