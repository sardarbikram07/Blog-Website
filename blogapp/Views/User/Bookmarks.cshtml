@model List<blogapp.Models.BlogPost>
@using Microsoft.EntityFrameworkCore
@inject blogapp.Data.BlogDBContext db

@{
    Layout = null; // Don't use the shared layout
    ViewData["Title"] = "Saved Bookmarks";
    int userId = ViewBag.UserId ?? 0;
    var userName = Context.Session.GetString("UserName") ?? "User";
    var userInitials = userName.Length > 1 ? string.Join("", userName.Split(' ').Select(n => n[0])).ToUpper() : userName.ToUpper();
    var sessionUserId = Context.Session.GetInt32("UserId");
    var isCreator = db.BlogPosts.Any(p => p.UserId == sessionUserId);
    var notifications = db.UserNotifications
        .Where(un => un.UserId == sessionUserId)
        .Include(un => un.Notification)
        .Where(un => un.Notification != null)
        .OrderByDescending(un => un.Notification.CreatedAt)
        .Take(10)
        .Select(un => un.Notification)
        .ToList();
    
    // Get profile image from session first, then from database as fallback
    var profileImage = Context.Session.GetString("ProfileImagePath");
    if (string.IsNullOrEmpty(profileImage) && sessionUserId.HasValue)
    {
        var user = db.Users.FirstOrDefault(u => u.Id == sessionUserId.Value);
        profileImage = user?.ProfileImagePath ?? "";
    }
    
    var hasProfileImage = !string.IsNullOrEmpty(profileImage);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BlogHub - Bookmarks</title>
    <link href="https://fonts.googleapis.com/css2?family=Segoe+UI:wght@400;700&display=swap" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
    
    <style>
        /* Bookmarks Specific Styles */
        .bookmarks-container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }

        .bookmarks-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(52, 152, 219, 0.1);
            animation: fadeIn 0.5s ease-in-out;
        }

        .bookmarks-title {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .bookmarks-subtitle {
            color: #666;
            font-size: 1.1rem;
            margin-bottom: 20px;
        }

        .bookmarks-count {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 8px 20px;
            border-radius: 25px;
            font-weight: 600;
            display: inline-block;
        }

        .bookmark-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(52, 152, 219, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .bookmark-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .bookmark-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .bookmark-content {
            display: flex;
            gap: 20px;
            align-items: flex-start;
        }

        .bookmark-image {
            width: 120px;
            height: 120px;
            border-radius: 12px;
            object-fit: cover;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .bookmark-card:hover .bookmark-image {
            transform: scale(1.05);
        }

        .bookmark-details {
            flex: 1;
        }

        .bookmark-title {
            font-size: 1.4rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 10px;
            line-height: 1.3;
        }

        .bookmark-excerpt {
            color: #666;
            line-height: 1.6;
            margin-bottom: 15px;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .bookmark-meta {
            display: flex;
            align-items: center;
            gap: 20px;
            color: #888;
            font-size: 0.9rem;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .bookmark-actions {
            display: flex;
            gap: 12px;
            margin-top: 15px;
            justify-content: flex-start;
            align-items: center;
        }

        .action-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .action-btn.primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .action-btn.secondary {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            border: 1px solid rgba(102, 126, 234, 0.3);
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(52, 152, 219, 0.1);
        }

        .empty-icon {
            font-size: 4rem;
            color: #667eea;
            margin-bottom: 20px;
        }

        .empty-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 10px;
        }

        .empty-subtitle {
            color: #666;
            margin-bottom: 30px;
        }

        .explore-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .explore-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
            color: white;
            text-decoration: none;
        }

        .back-btn {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            padding: 10px 20px;
            border: 1px solid rgba(102, 126, 234, 0.3);
            border-radius: 25px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            margin-top: 20px;
        }

        .back-btn:hover {
            background: rgba(102, 126, 234, 0.2);
            color: #667eea;
            text-decoration: none;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @@media (max-width: 768px) {
            .bookmark-content {
                flex-direction: column;
            }
            
            .bookmark-image {
                width: 100%;
                height: 200px;
            }
            
            .bookmarks-title {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar">
        <nav>
            <button class="close-sidebar-button" id="closeSidebarButton">☰</button>
            <ul class="nav-menu">
                <li class="nav-item" onclick="closeSidebar(); window.location.href='/Feed/Index'">
                    <span>⌂</span> Home Feed
                </li>
                <li class="nav-item" onclick="closeSidebar(); window.location.href='/User/EditProfile'">
                    <span>👤</span> Edit Profile
                </li>
                <li class="nav-item" onclick="closeSidebar(); window.location.href='/User/Bookmarks'">
                    <span>🔖</span> Bookmarks
                </li>
                <li class="nav-item" onclick="closeSidebar(); window.location.href='/User/MyPosts'">
                    <span>📝</span> My Posts
                </li>
                <li class="nav-item" onclick="closeSidebar(); window.location.href='/Category'">
                    <span>🏷️</span> Categories
                </li>
                <li class="nav-item" onclick="closeSidebar(); logout()">
                    <span>⏏️</span> Logout
                </li>
            </ul>
        </nav>
    </aside>
    <div class="overlay" id="overlay"></div>

    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <button class="menu-toggle" id="menuToggle">☰</button>
            <div class="logo">
                <h1>BlogHub</h1>
            </div>
            <div class="search-container">
                <form method="get" action="/Feed/Index">
                    <input type="text" name="search" class="search-bar" placeholder="Search blogs, topics, authors..." value="@Context.Request.Query["search"]">
                    <button class="search-btn" type="submit">🔍</button>
                </form>
            </div>
            <div class="header-actions">
                <button class="create-post-btn" onclick="window.location.href='/BlogPost/Create'">
                    ✨ Create New Post
                </button>
                <div class="user-menu">
                    <button class="notification-btn" onclick="toggleNotifications()">
                        <i class="fas fa-bell"></i>
                    </button>
                    <div class="user-profile" onclick="window.location.href='/User/Dashboard'">
                        @if (hasProfileImage)
                        {
                            <img src="@profileImage" alt="@userName" class="user-avatar-img" />
                        }
                        else
                        {
                            <div class="user-avatar">@userInitials</div>
                        }
                        <span>@userName</span>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="main-content">
        @Html.AntiForgeryToken()
        
        <div class="bookmarks-container">
            <!-- Header Section -->
            <div class="bookmarks-header">
                <h1 class="bookmarks-title">
                    <i class="fas fa-bookmark me-3"></i>My Bookmarks
                </h1>
                <p class="bookmarks-subtitle">Your saved articles and favorite reads</p>
                <div class="bookmarks-count">
                    <i class="fas fa-bookmark me-2"></i>@Model.Count saved posts
                </div>
            </div>

    @if (!Model.Any())
    {
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class="fas fa-bookmark"></i>
                    </div>
                    <h3 class="empty-title">No Bookmarks Yet</h3>
                    <p class="empty-subtitle">Start exploring and save your favorite articles for later reading.</p>
                    <a href="/Feed/Index" class="explore-btn">
                        <i class="fas fa-search"></i> Explore Posts
                    </a>
        </div>
    }
    else
    {
        foreach (var post in Model)
        {
            var isLiked = post.Likes?.Any(l => l.UserId == userId) ?? false;
                    var content = post.Content ?? "";
                    var excerpt = content.Length > 150 ? content.Substring(0, 150) + "..." : content;

                    <div class="bookmark-card" onclick="location.href='/BlogPost/Details/@post.Id'">
                        <div class="bookmark-content">
                        <img src="@(!string.IsNullOrEmpty(post.ImagePath) ? post.ImagePath : "/images/placeholder.png")"
                                 alt="@post.Title" class="bookmark-image" />
                            
                            <div class="bookmark-details">
                                <h3 class="bookmark-title">@post.Title</h3>
                                <p class="bookmark-excerpt">@Html.Raw(excerpt)</p>
                                
                                <div class="bookmark-meta">
                                    <div class="meta-item">
                                        <i class="fas fa-calendar"></i>
                                        <span>@post.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    <div class="meta-item">
                                        <i class="fas fa-comments"></i>
                                        <span>@(post.Comments?.Count ?? 0) comments</span>
                                    </div>
                                    <div class="meta-item">
                                        <i class="fas fa-heart"></i>
                                        <span>@(post.Likes?.Count ?? 0) likes</span>
                                    </div>
                    </div>
                                
                                <div class="bookmark-actions">
                                    <button class="action-btn secondary" onclick="event.stopPropagation(); removeBookmark(@post.Id, this)">
                                        <i class="fas fa-bookmark"></i> Remove
                                    </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

            <div class="text-center">
                <a href="/User/MyPosts" class="back-btn">
                    <i class="fas fa-arrow-left"></i> Back to My Posts
    </a>
</div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <p>© 2025 - BlogHub | Made with ❤️ for creators</p>
        </div>
    </footer>

    <!-- JavaScript -->
    <script src="~/js/site.js"></script>
    <script>
        function removeBookmark(postId, button) {
            if (confirm('Remove this post from your bookmarks?')) {
                button.disabled = true;
                const originalContent = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Removing...';

                fetch(`/User/ToggleBookmarkAjax/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove the card from the UI
                        const card = button.closest('.bookmark-card');
                        card.style.opacity = '0';
                        card.style.transform = 'translateX(100px)';
                        setTimeout(() => {
                            card.remove();
                            // Update the count
                            const countElement = document.querySelector('.bookmarks-count');
                            const currentCount = parseInt(countElement.textContent.match(/\d+/)[0]);
                            countElement.innerHTML = `<i class="fas fa-bookmark me-2"></i>${currentCount - 1} saved posts`;
                        }, 300);
                    } else {
                        showNotification(data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error removing bookmark. Please try again.', 'error');
                })
                .finally(() => {
                    button.disabled = false;
                    button.innerHTML = originalContent;
                });
            }
        }
    </script>
    <!-- Notification Panel -->
    <div class="notification-panel" id="notificationPanel">
        <div class="notification-header">
            <h3>Notifications</h3>
            <button class="close-notifications" onclick="toggleNotifications()">×</button>
        </div>
        <div class="notification-list">
            @if (notifications.Any())
            {
                @foreach (var notification in notifications)
                {
                    <div class="notification-item">
                        <div class="notification-icon">🔔</div>
                        <div class="notification-content">
                            <strong>@notification.Title</strong>
                            <p>@Html.Raw(notification.Message)</p>
                            <span class="notification-time">@notification.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="notification-item">
                    <div class="notification-icon">🔔</div>
                    <div class="notification-content">
                        <p>No notifications yet</p>
                        <span class="notification-time">Check back later</span>
                    </div>
                </div>
            }
        </div>
    </div>
</body>
</html>
